@startuml


abstract class QueryRewriter {
    + rewrite(in query: String): String
}

class LLMQueryRewriter {
    + LLMQueryRewriter(llm: BaseLanguageModel)
    + rewrite(in query: String): String
    ===
    - llm: BaseLanguageModel
    - template: String
}


class ChatbotEngine {
    + {static} create_engine(): ChatbotEngine
    ===
    + invoke(in query: String): String
    ===
    - initialize_template(template: Optional[str]): void
    - initialize_db(persist_directory: String): void
    - initialize_llm(llm: Optional[BaseLanguageModel]): void
    - initialize_rewriter(llm: Optional[BaseLanguageModel]): void
}


class MiniDB  << (S,#FF7700) Singleton >> {
    + load(): bool
    + exist(): bool
    + create(documents: Iterable[Document]): void
    + get_vector_store(): vectorstores.chroma.Chroma
}



QueryRewriter <|-- LLMQueryRewriter
QueryRetriever <|-- MMRQueryRetriever

ChatbotEngine o-- QueryRewriter
ChatbotEngine o-- MiniDB
ChatbotEngine o-- QueryRetriever




abstract class QueryRetriever {
    + get_docs(in query: String): List[Document]
}
class MMRQueryRetriever {
    + MMRQueryRetriever(in vectorStore: Chroma, in fetch_k: int)
    ===
    + get_docs(in query: String): List[Document]
    ===
    - vectorStore: Chroma
    - fetch_k: int
}
@enduml